#!/usr/bin/env bash

usage="Usage: $(basename "$0") [-d] [-h] [-i] [-v]
    This script syncs specific files between the XDG config directory and this
    git repository. The XDG config directory if not set defaults to the home
    directory. The sync works by creating a hard links. The default mode is
    backup mode, which creates a hard link of files in the XDG config directory
    in the git repository.

Options:
    -d  delete destination dirs first
    -h  prints this usage message
    -i  specifies install mode, which creates link in reverse to that of
        backup mode
    -v  specifies verbose mode, which shows every step"

declare mode
declare -i verbosity=0
declare -i delete=0

# Handle options
while getopts ':dhiv' option
do
    case $option in
        d)
            delete=1;
            ;;
        h)
            echo "$usage"
            exit
            ;;
        i)
            mode='i'
            ;;
        v)
            verbosity=1;
            ;;
        ?)
            echo "Illegal option: -$OPTARG" >&2
            echo "$usage" >&2
            exit 1
            ;;
    esac
done

# Config directory (defaults to home directory)
config_dir="${XDG_CONFIG_DIR:-$HOME}"

# Repository directory (the directory of this script)
repo_dir=$(dirname "$0")
include_file="$repo_dir/include"

wisper() {
    if [[ $verbosity -ne 0 ]]; then
        echo "$@"
    fi
}

# List of files/folders to backup
if [[ ! -r $include_file ]]
then
    echo "Missing include file" >&2
    read -r -p "Generate include file using sample and continue? [Y/n]" -n 1 ans
    case $ans in
        [Nn])
            exit;;
        *)
            cp sample_include include
            wisper "Copied sample include file"
            ;;
    esac
fi
files=$(cat "$include_file")

# Handle install mode
if [[ $mode = 'i' ]]
then
    link_from="$repo_dir"
    link_to="$config_dir"
    wisper "Installing files $files to config dir $config_dir"
else
    link_from="$config_dir"
    link_to="$repo_dir"
    wisper "Backing up files $files in config dir $config_dir"
fi

link_file() {
    declare -r link_from="$1"
    declare -r link_to="$2"
    declare -r file="$3"

    if [[ "$link_from/$file" -ef "$link_to/$file" ]]
    then
        wisper "Already linked file: $link_to/$file"
    else
        mkdir -p "$link_to/$(dirname "$file")"
        ln -fv "$link_from/$file" "$link_to/$file"
    fi
}

link() {
    declare -r link_from="$1"
    declare -r link_to="$2"
    declare -r file="$3"

    if [[ -f "$link_from/$file" ]]
    then
        link_file "$link_from" "$link_to" "$file"
    elif [[ -d "$link_from/$file" ]]
    then
        for subfile in "$link_from/$file/"*
        do
            subfile="$(basename "$subfile")"
            link "$link_from/$file" "$link_to/$file" "$subfile"
        done
    fi
}

for file in $files
do
    if [[ $delete -ne 0 ]]
    then
        rm -r "${link_to:?}/$file"
        echo "Removed $link_to/$file"
    fi
    link "$link_from" "$link_to" "$file"
done
